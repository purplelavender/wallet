/** * */package share.exchange.framework.base;import android.content.Context;import android.os.Bundle;import android.os.PersistableBundle;import android.support.v7.app.AppCompatActivity;import butterknife.ButterKnife;import butterknife.Unbinder;import share.exchange.framework.dialog.LoadingProgressDialog;import share.exchange.framework.manager.AppManager;import share.exchange.framework.utils.EnvironmentUtil;import share.exchange.framework.widget.CommonToast;/** * * @ClassName:      BaseAppActivity * @Description:    应用Activity的基类 * @Author:         ZL * @CreateDate:     2019/08/05 14:31 */public abstract class BaseAppActivity extends AppCompatActivity {    private LoadingProgressDialog mLodingDialog;    protected Unbinder unbinder;    protected final String TAG = this.getClass().getSimpleName();    protected Context mAppContext;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        // 添加Activity到堆栈        AppManager.getAppManager().addActivity(this);        initAppContext();        if (getLayoutResId() > 0) {            setContentView(getLayoutResId());        }        unbinder = ButterKnife.bind(this);        initView(savedInstanceState);        initEvent();        initCurrentData();    }    /**     * 布局文件资源ID     */    protected abstract int getLayoutResId();    /**     * 负责有关handler等对象,界面ui组件的初始化     */    protected void initView(Bundle savedInstanceState) {    }    /**     * 负责有关界面ui组件事件的初始化     */    protected abstract void initEvent();    /**     * 加载完成处理业务逻辑     */    protected abstract void initCurrentData();    /**     * 恢复当前activity     */    @Override    protected void onResume() {        super.onResume();    }    @Override    protected void onPause() {        super.onPause();    }    @Override    protected void onDestroy() {        // 结束Activity&从堆栈中移除        AppManager.getAppManager().removeActivity(this);        super.onDestroy();        if (null != unbinder) {            unbinder.unbind();        }    }    @Override    public void onSaveInstanceState(Bundle outState, PersistableBundle outPersistentState) {        super.onSaveInstanceState(outState, outPersistentState);    }    @Override    protected void onRestoreInstanceState(Bundle savedInstanceState) {        super.onRestoreInstanceState(savedInstanceState);        initAppContext();    }    /**     * 返回按键     */    @Override    public void onBackPressed() {        super.onBackPressed();    }    /**     * 网络是否可用     *     * @author wragony     */    public boolean hasNetwork() {        return EnvironmentUtil.isNetworkConnected(this);    }    protected void initAppContext() {        try {            this.mAppContext = getApplicationContext();        } catch (Exception e) {        }    }    /**     * @param toastType 提示类型     * @param message   提示文字     * @author wragony     */    public void showToast(CommonToast.ToastType toastType, String message) {        if (!this.isFinishing()) {            CommonToast.showToast(this, toastType, message);        }    }    /**     * @param message     * @param cancelable     * @description 显示加载提示     * @author wragony     */    public void showLoading(String message, boolean cancelable) {        if (!this.isFinishing()) {            if (null == mLodingDialog) {                this.mLodingDialog = new LoadingProgressDialog(this);            }            mLodingDialog.show();            mLodingDialog.setMessage(message);            mLodingDialog.setCancelable(cancelable);        }    }    /**     * @param message     * @description 显示加载提示     * @author wragony     */    public void showLoading(String message) {        showLoading(message, true);    }    /**     * @description 隐藏加载提示     * @author wragony     */    public void hideLoading() {        if (null != mLodingDialog && !this.isFinishing()) {            mLodingDialog.dismiss();            mLodingDialog = null;        }    }}