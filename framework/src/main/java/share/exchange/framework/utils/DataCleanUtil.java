package share.exchange.framework.utils;import android.content.Context;import android.os.Environment;import android.util.Log;import java.io.File;/** * * @ClassName:      DataCleanUtil * @Description:    清理缓存 * @Author:         ZL * @CreateDate:     2019/08/06 10:28 */public class DataCleanUtil {    /**     * 清除本应用内部缓存(/data/data/com.xxx.xxx/cache) * * @param context     */    public static void cleanInternalCache(Context context) {        deleteFilesByDirectory(context.getCacheDir());    }    /**     * 清除本应用所有数据库(/data/data/com.xxx.xxx/databases) * * @param context     */    public static void cleanDatabases(Context context) {        deleteFilesByDirectory(new File("/data/data/" + context.getPackageName() + "/databases"));    }    /**     * * 清除本应用SharedPreference(/data/data/com.xxx.xxx/shared_prefs) * * @param     * context     */    public static void cleanSharedPreference(Context context) {        deleteFilesByDirectory(new File("/data/data/" + context.getPackageName() + "/shared_prefs"));    }    /**     * 按名字清除本应用数据库 * * @param context * @param dbName     */    public static void cleanDatabaseByName(Context context, String dbName) {        context.deleteDatabase(dbName);    }    /**     * 清除/data/data/com.xxx.xxx/files下的内容 * * @param context     */    public static void cleanFiles(Context context) {        deleteFilesByDirectory(context.getFilesDir());    }    /**     * * 清除外部cache下的内容(/mnt/sdcard/android/data/com.xxx.xxx/cache) * * @param     * context     */    public static void cleanExternalCache(Context context) {        if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {            deleteFilesByDirectory(context.getExternalCacheDir());        }    }    /**     * 清除自定义路径下的文件，使用需小心，请不要误删。而且只支持目录下的文件删除 * * @param filePath     */    public static void cleanCustomCache(String filePath) {//        deleteFilesByDirectory(new File(filePath));        FileUtil.clearDirectory(new File(filePath));    }    public static void clearWebViewCache(Context context) {        try {            File file = new File("/data/data/" + context.getPackageName() + "/webview/");            if (file != null && file.exists()) {                if (file.isDirectory()) {                    for (File item : file.listFiles()) {                        item.delete();                    }                }                file.delete();            }        } catch (Exception e) {            Log.d("WebView", Log.getStackTraceString(e));        }        try {            context.deleteDatabase("webview.db");            context.deleteDatabase("webviewCache.db");        } catch (Exception e) {            Log.d("WebView", Log.getStackTraceString(e));        }    }    /**     * 清除本应用所有的数据 * * @param context * @param filepath     */    public static void cleanApplicationData(Context context, String... filepath) {        cleanInternalCache(context);        cleanExternalCache(context);        clearWebViewCache(context);        cleanFiles(context);        for (String filePath : filepath) {            cleanCustomCache(filePath);        }    }    /**     * 删除方法 这里只会删除某个文件夹下的文件，如果传入的directory是个文件，将不做处理 * * @param directory     */    private static void deleteFilesByDirectory(File directory) {        if (directory != null && directory.exists() && directory.isDirectory()) {            for (File item : directory.listFiles()) {                item.delete();            }        }    }    /**     * @param context     * @param filepath     * @return     * @description 获得缓存目录文件大小     * @author wragony     */    public static long getApplicationDataSize(Context context, String... filepath) {        long fileSize = 0;        try {            for (String filePath : filepath) {                try {                    fileSize += FileUtil.getFileOrDirSize(new File(filePath));                } catch (Exception e) {                    continue;                }            }        } catch (Exception e) {        }        return fileSize;    }}