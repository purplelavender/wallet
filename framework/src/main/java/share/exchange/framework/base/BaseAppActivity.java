package share.exchange.framework.base;import android.content.Context;import android.graphics.drawable.Drawable;import android.os.Build;import android.os.Bundle;import android.os.PersistableBundle;import android.support.annotation.NonNull;import android.support.v7.app.AppCompatActivity;import android.view.View;import android.view.ViewGroup;import android.view.WindowManager;import android.widget.FrameLayout;import java.util.Arrays;import java.util.List;import butterknife.ButterKnife;import butterknife.Unbinder;import pub.devrel.easypermissions.AppSettingsDialog;import pub.devrel.easypermissions.EasyPermissions;import share.exchange.framework.R;import share.exchange.framework.constant.CommonConst;import share.exchange.framework.constant.LanguageEnums;import share.exchange.framework.dialog.LoadingProgressDialog;import share.exchange.framework.manager.AppManager;import share.exchange.framework.utils.EnvironmentUtil;import share.exchange.framework.utils.ResourcesUtil;import share.exchange.framework.utils.SpUtil;import share.exchange.framework.widget.AutoSizeTextView;import share.exchange.framework.widget.BaseStateLayout;import share.exchange.framework.widget.CommonToast;/** * @ClassName: BaseAppActivity * @Description: 应用Activity的基类 * @Author: ZL * @CreateDate: 2019/08/05 14:31 */public abstract class BaseAppActivity extends AppCompatActivity implements EasyPermissions.PermissionCallbacks {    private LoadingProgressDialog mLodingDialog;    protected Unbinder unbinder;    protected final String TAG = this.getClass().getSimpleName();    protected Context mAppContext;    private BaseStateLayout mStateView;    private FrameLayout mToolbar;    private AutoSizeTextView tvBaseTitle;    private AutoSizeTextView tvBaseLeft;    private AutoSizeTextView tvBaseRight;    private FrameLayout mStatebar;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        int language = SpUtil.getLanguage(this);        EnvironmentUtil.changeAppLanguage(this, LanguageEnums.getLanguageByKye(language));        setContentView(R.layout.base_activity);        // Activity加入模拟栈        AppManager.getAppManager().addActivity(this);        mStateView = findViewById(R.id.state_view);        mStatebar = findViewById(R.id.state_bar);        mToolbar = findViewById(R.id.toolbar);        tvBaseTitle = findViewById(R.id.tv_title);        tvBaseLeft = findViewById(R.id.tv_left);        tvBaseRight = findViewById(R.id.tv_right);        int layout = getLayoutResId();        if (layout != 0) {            mStateView.addStatLayout(BaseStateLayout.STATE_SUCCESS, layout);        }        View view = mStateView.getStateView(BaseStateLayout.STATE_SUCCESS);        unbinder = ButterKnife.bind(this, view);        initAppContext();        // 初始化Toolbar标题栏        initStatebar();        initToolbar();        // 下级正常页面的处理        initView(savedInstanceState);        initEvent();        initCurrentData();    }    /**     * 初始化沉浸式状态栏     */    private void initStatebar() {        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {            getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);            mStatebar.setVisibility(View.VISIBLE);            final int statusHeight = EnvironmentUtil.getStatusBarHeight(this);            mStatebar.post(new Runnable() {                @Override                public void run() {                    ViewGroup.LayoutParams params = mStatebar.getLayoutParams();                    params.height = statusHeight;                    mStatebar.setLayoutParams(params);                    mStatebar.setBackgroundColor(ResourcesUtil.getColor(mAppContext, R.color.text_color));                }            });        }    }    /**     * 初始化Toolbar相关     *     * @return     */    private void initToolbar() {        // 标题栏左边图标监听        Drawable drawable = getResources().getDrawable(R.drawable.ic_tool_return);        drawable.setBounds(0, 0, drawable.getMinimumWidth(), drawable.getMinimumHeight());        tvBaseLeft.setCompoundDrawables(drawable, null, null, null);        tvBaseLeft.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                onBackPressed();            }        });    }    /**     * 设置Toolbar是否显示     *     * @param isShow     */    public void showTitleBar(Boolean isShow) {        mToolbar.setVisibility(isShow ? View.VISIBLE : View.GONE);    }    /**     * 设置标题文字颜色     * @param color     */    public void setTitleTextColor(int color) {        tvBaseTitle.setTextColor(color);    }    /**     * 设置标题右边文字颜色     * @param color     */    public void setRightTextColor(int color) {        tvBaseRight.setTextColor(color);    }    /**     * 设置标题左边文字颜色     * @param color     */    public void setLeftTextColor(int color) {        tvBaseLeft.setTextColor(color);    }    /**     * 设置标题背景色     * @param color     */    public void setToolBarBackground(int color) {        mToolbar.setBackgroundResource(color);    }    /**     * 设置Toolbar标题为文字及监听     *     * @param titleTxt     * @param leftDrawable     * @param rightDrawable     * @param listener     */    public void setToolTitleClick(String titleTxt, Drawable leftDrawable, Drawable rightDrawable, View.OnClickListener listener) {        tvBaseTitle.setText(titleTxt);        if (leftDrawable != null) {            leftDrawable.setBounds(0, 0, leftDrawable.getMinimumWidth(), leftDrawable.getMinimumHeight());        }        if (rightDrawable != null) {            rightDrawable.setBounds(0, 0, rightDrawable.getMinimumWidth(), rightDrawable.getMinimumHeight());        }        tvBaseTitle.setCompoundDrawables(leftDrawable, null, rightDrawable, null);        tvBaseTitle.setCompoundDrawablePadding(EnvironmentUtil.dip2px(mAppContext, 5));        tvBaseTitle.setOnClickListener(listener);    }    /**     * 设置Toolbar左边为文字及监听     *     * @param leftTxt     * @param leftDrawable     * @param rightDrawable     * @param listener     */    public void setToolLeftClick(String leftTxt, Drawable leftDrawable, Drawable rightDrawable, View.OnClickListener listener) {        tvBaseLeft.setText(leftTxt);        if (leftDrawable != null) {            leftDrawable.setBounds(0, 0, leftDrawable.getMinimumWidth(), leftDrawable.getMinimumHeight());        }        if (rightDrawable != null) {            rightDrawable.setBounds(0, 0, rightDrawable.getMinimumWidth(), rightDrawable.getMinimumHeight());        }        tvBaseLeft.setCompoundDrawables(leftDrawable, null, rightDrawable, null);        tvBaseLeft.setCompoundDrawablePadding(EnvironmentUtil.dip2px(mAppContext, 5));        tvBaseLeft.setOnClickListener(listener);    }    /**     * 设置Toolbar右边为文字及监听     *     * @param rightTxt     * @param leftDrawable     * @param rightDrawable     * @param listener     */    public void setToolRightClick(String rightTxt, Drawable leftDrawable, Drawable rightDrawable, View.OnClickListener listener) {        tvBaseRight.setText(rightTxt);        if (leftDrawable != null) {            leftDrawable.setBounds(0, 0, leftDrawable.getMinimumWidth(), leftDrawable.getMinimumHeight());        }        if (rightDrawable != null) {            rightDrawable.setBounds(0, 0, rightDrawable.getMinimumWidth(), rightDrawable.getMinimumHeight());        }        tvBaseRight.setCompoundDrawables(leftDrawable, null, rightDrawable, null);        tvBaseRight.setCompoundDrawablePadding(EnvironmentUtil.dip2px(mAppContext, 5));        tvBaseRight.setOnClickListener(listener);    }    /**     * 显示加载进行中布局     */    protected void showLoadingStateLayout() {        mStateView.showStateView(BaseStateLayout.STATE_LOADING);    }    /**     * 显示加载成功布局     */    protected void showSuccessStateLayout() {        mStateView.showStateView(BaseStateLayout.STATE_SUCCESS);    }    /**     * 显示加载错误/网络出错布局     */    protected void showErrorStateLayout() {        mStateView.showStateView(BaseStateLayout.STATE_ERROR);        mStateView.getStateView(BaseStateLayout.STATE_ERROR).findViewById(R.id.txt_error)                .setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View view) {                        errorLoadData();                    }                });    }    /**     * 显示数据为空布局     */    protected void showEmptyStateLayout() {        mStateView.showStateView(BaseStateLayout.STATE_EMPTY);    }    /**     * 显示需要登录布局     */    protected void showLoginStateLayout() {        mStateView.showStateView(BaseStateLayout.STATE_LOGIN);        mStateView.getStateView(BaseStateLayout.STATE_LOGIN).findViewById(R.id.txt_login)                .setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View view) {                        goLoginActivity();                    }                });    }    protected boolean isLoginStateLayout() {        return mStateView.getCurrentState() == BaseStateLayout.STATE_LOGIN;    }    protected void goLoginActivity() {    }    protected void errorLoadData() {    }    public boolean isFragmentAdd() {        return true;    }    /**     * 布局文件资源ID     */    protected abstract int getLayoutResId();    /**     * 负责有关handler等对象,界面ui组件的初始化     */    protected abstract void initView(Bundle savedInstanceState);    /**     * 负责有关界面ui组件事件的初始化     */    protected abstract void initEvent();    /**     * 加载需要第一时间请求的网络数据     */    protected abstract void initCurrentData();    /**     * 恢复当前activity     */    @Override    protected void onResume() {        super.onResume();    }    @Override    protected void onPause() {        super.onPause();    }    @Override    protected void onDestroy() {        // 结束Activity&从堆栈中移除        AppManager.getAppManager().removeActivity(this);        super.onDestroy();        if (null != unbinder) {            unbinder.unbind();        }    }    @Override    public void onSaveInstanceState(Bundle outState, PersistableBundle outPersistentState) {        super.onSaveInstanceState(outState, outPersistentState);    }    @Override    protected void onRestoreInstanceState(Bundle savedInstanceState) {        super.onRestoreInstanceState(savedInstanceState);        initAppContext();    }    /**     * 返回按键     */    @Override    public void onBackPressed() {        super.onBackPressed();    }    /**     * 网络是否可用     */    public boolean hasNetwork() {        return EnvironmentUtil.isNetworkConnected(this);    }    protected void initAppContext() {        try {            this.mAppContext = getApplicationContext();        } catch (Exception e) {        }    }    /**     * @param toastType 提示类型     * @param message   提示文字     */    public void showToast(CommonToast.ToastType toastType, String message) {        if (!this.isFinishing()) {            CommonToast.showToast(this, toastType, message);        }    }    /**     * @param message     * @param cancelable     * @description 显示加载提示     */    public void showLoading(String message, boolean cancelable) {        if (!this.isFinishing()) {            if (null == mLodingDialog) {                this.mLodingDialog = new LoadingProgressDialog(this);            }            mLodingDialog.show();            mLodingDialog.setMessage(message);            mLodingDialog.setCancelable(cancelable);        }    }    /**     * @param message     * @description 显示加载提示     */    public void showLoading(String message) {        showLoading(message, true);    }    /**     * @description 隐藏加载提示     */    public void hideLoading() {        if (null != mLodingDialog && !this.isFinishing()) {            mLodingDialog.dismiss();            mLodingDialog = null;        }    }    /**     * 显示登陆失效弹层     */    public void showLoginDialog(){    }    @Override    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {        super.onRequestPermissionsResult(requestCode, permissions, grantResults);        EasyPermissions.onRequestPermissionsResult(requestCode, permissions, grantResults, this);    }    @Override    public void onPermissionsGranted(int requestCode, List<String> perms) {    }    @Override    public void onPermissionsDenied(int requestCode, List<String> perms) {        if (null != perms && perms.size() > 0) {            if (EasyPermissions.somePermissionPermanentlyDenied(this, perms)) {                alertAppSetPermission(getString(R.string.permission_not_ask_again), CommonConst.REQUEST_CODE_USER_PERMISSION);                return;            }        }    }    @Override    public boolean shouldShowRequestPermissionRationale(@NonNull String permission) {        return false;    }    /**     * 请求权限操作     *     * @param rationale             请求权限提示语     * @param permissionRequestCode 权限requestCode     * @param perms                 申请的权限列表     */    protected void performCodeWithPermission(@NonNull String rationale, final int permissionRequestCode, @NonNull String[] perms) {        if (EasyPermissions.hasPermissions(this, perms)) {            onPermissionsGranted(permissionRequestCode, Arrays.asList(perms));        } else {            EasyPermissions.requestPermissions(this, rationale, permissionRequestCode, perms);        }    }    /**     * 跳转设置弹框 建议在权限被设置为不在询问时弹出 提示用户前往设置页面打开权限     *     * @param tips        提示信息     * @param requestCode 页面返回时onActivityResult的requestCode     */    protected void alertAppSetPermission(String tips, int requestCode) {        if (!this.isFinishing()) {            new AppSettingsDialog.Builder(this)                    .setRationale(tips)                    .setTitle(getString(R.string.permission_deny_again_title))                    .setPositiveButton(getString(R.string.permission_deny_again_positive))                    .setNegativeButton(getString(R.string.permission_deny_again_nagative))                    .setRequestCode(requestCode)                    .build()                    .show();        }    }}