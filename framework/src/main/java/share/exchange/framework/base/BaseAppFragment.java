/** * */package share.exchange.framework.base;import android.app.Activity;import android.content.Context;import android.os.Bundle;import android.support.annotation.Nullable;import android.support.v4.app.Fragment;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import java.lang.reflect.Field;import butterknife.ButterKnife;import butterknife.Unbinder;import share.exchange.framework.dialog.LoadingProgressDialog;import share.exchange.framework.widget.CommonToast;/** * * @ClassName:      BaseAppFragment * @Description:    应用Fragment的基类 * @Author:         ZL * @CreateDate:     2019/08/05 14:31 */public abstract class BaseAppFragment extends Fragment {    private LoadingProgressDialog mLodingDialog;    protected final String TAG = this.getClass().getSimpleName();    protected Context mAppContext;    protected Activity mActivity;    protected View mContentView;    @Nullable    protected Unbinder unbinder;    @Override    public void onDestroyView() {        super.onDestroyView();        try {            if (null != unbinder) {                unbinder.unbind();            }        } catch (Exception e) {            e.printStackTrace();        }    }    @Override    public void onAttach(Activity activity) {        super.onAttach(activity);        initContext();    }    @Override    public void onAttach(Context context) {        super.onAttach(context);        initContext();    }    @Override    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {        if (null == mContentView) {            mContentView = inflater.inflate(getLayoutResId(), container, false);            unbinder = ButterKnife.bind(this, mContentView);            initView(mContentView);            initEvent();            processLogic();        }        ViewGroup parent = (ViewGroup) mContentView.getParent();        if (parent != null) {            parent.removeView(mContentView);        }        return mContentView;    }    @Override    public void onDetach() {        super.onDetach();        try {//ChildFragmentManager出现No activity            Field childFragmentManager = Fragment.class.getDeclaredField("mChildFragmentManager");            childFragmentManager.setAccessible(true);            childFragmentManager.set(this, null);        } catch (NoSuchFieldException e) {            throw new RuntimeException(e);        } catch (IllegalAccessException e) {            throw new RuntimeException(e);        }    }    @Override    public void onViewStateRestored(@Nullable Bundle savedInstanceState) {        super.onViewStateRestored(savedInstanceState);        initContext();    }    /**     * 布局文件资源ID     */    protected abstract int getLayoutResId();    /**     * 负责有关handler等对象,界面ui组件的初始化     */    protected  void initView(View mContentView){};    /**     * 负责有关界面ui组件事件的初始化     */    protected abstract void initEvent();    /**     * 处理业务逻辑     */    protected abstract void processLogic();    /**     *     */    protected void initContext() {        try {            this.mActivity = getActivity();            this.mAppContext = getActivity().getApplicationContext();        } catch (Exception e) {        }    }    @Override    public void onPause() {        super.onPause();    }    @Override    public void onResume() {        super.onResume();    }    @Override    public void onDestroy() {        super.onDestroy();    }    /**     * @param toastType 提示类型     * @param message   提示文字     * @author wragony     */    public void showToast(CommonToast.ToastType toastType, String message) {        CommonToast.showToast(getActivity(), toastType, message);    }    /**     * @param message     * @param cancelable     * @description 显示加载提示     * @author wragony     */    public void showLoading(String message, boolean cancelable) {        if (null != mActivity && !mActivity.isFinishing()) {            if (null == mLodingDialog) {                this.mLodingDialog = new LoadingProgressDialog(mActivity);            }            mLodingDialog.show();            mLodingDialog.setMessage(message);            mLodingDialog.setCancelable(cancelable);        }    }    /**     * @param message     * @description 显示加载提示     * @author wragony     */    public void showLoading(String message) {        showLoading(message, true);    }    /**     * @description 隐藏加载提示     * @author wragony     */    public void hideLoading() {        if (null != mLodingDialog && !mActivity.isFinishing()) {            mLodingDialog.dismiss();            mLodingDialog = null;        }    }}